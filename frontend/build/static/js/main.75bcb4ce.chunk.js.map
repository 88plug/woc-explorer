{"version":3,"sources":["history.js","store.js","Components/Blocks/index.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Store","Object","classCallCheck","this","decorate","store","Blocks","react_default","a","createElement","Component","App","Router","history","index_module","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAEeA,+BCgBTC,SACJ,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,KAgBjBI,YAASJ,EAAO,IAMD,IAAAK,EAAA,IAAIL,ECjCJM,mLAJX,OAAOC,EAAAC,EAAAC,cAAA,2BAFUC,aC2BNC,mLAhBX,OACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAASA,GACfN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUT,MAAOA,GACfE,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWZ,cAN3BI,aCCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75bcb4ce.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import {\n  decorate,\n  observable,\n  action,\n  computed,\n  runInAction,\n  autorun\n  // toJS\n} from \"mobx\";\n\nimport axios from \"axios\";\n\n// import history from \"./history\";\n// import LoginStore from \"./Components/Login/store\";\n// import SupplierStore from \"./Components/Suppliers/store\";\n// import ControlCategoriesStore from \"./Components/ControlCategories/store\";\n// import ControlsStore from \"./Components/Controls/store\";\n\nclass Store {\n  constructor() {\n    // this.LoginStore = new LoginStore(this);\n    // this.SuppliersStore = new SupplierStore(this);\n    // this.ControlCategoriesStore = new ControlCategoriesStore(this);\n    // this.ControlsStore = new ControlsStore(this);\n  }\n\n  // logout() {\n  //   runInAction(\"Set logout properties\", () => {\n  //     this.token = null;\n  //     this.username = null;\n  //     history.push(\"/login\");\n  //   });\n  // }\n}\n\ndecorate(Store, {\n  // token: observable,\n  // logout: action,\n  // averageRTT: computed,\n});\n\nexport default new Store();\n","import React, { Component } from \"react\";\n\nclass Blocks extends Component {\n  render() {\n    return <div>Hello</div>;\n  }\n}\n\nexport default Blocks;\n","import React, { Component } from \"react\";\nimport { Provider } from \"mobx-react\";\nimport { Router, Switch, Route } from \"react-router-dom\";\n\nimport history from \"../../history\";\n\nimport \"./App.css\";\n\nimport store from \"../../store\";\nimport Blocks from \"../Blocks\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={history}>\n        <Provider store={store}>\n          <Switch>\n            <Route path=\"/blocks\" component={Blocks} />\n            {/* <Route path=\"/suppliers\" component={Suppliers} />\n            <Route exact path=\"/controls/:supplier\" component={ControlCategories} />\n            <Route path=\"/controls/:supplier/:category\" component={Controls} /> */}\n            {/* <Redirect to=\"/home\" /> */}\n          </Switch>\n        </Provider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}